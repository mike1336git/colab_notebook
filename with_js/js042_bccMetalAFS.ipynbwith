{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOe2lf/A24rbII9JNBGnzQw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mike1336git/colab_notebook/blob/main/with_js/js042_bccMetalAFS.ipynbwith\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### simulator( html + css + js ) + control( python )"
      ],
      "metadata": {
        "id": "0HhqZdRxExdx"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "cellView": "form",
        "id": "o7LM5AvEGWuE"
      },
      "outputs": [],
      "source": [
        "#@title js042_bccMetalAFS / def exec_html_js() ... exec me first\n",
        "#\n",
        "#  Copyright(C) 2023-2024 Mitsuru Ikeuchi\n",
        "#  home page: https://mike1336.web.fc2.com/index.html\n",
        "#  Released under the MIT license ( https://opensource.org/licenses/MIT )\n",
        "#\n",
        "#  ver 0.0.0  2023.09.29 created,  last updated on 2025.09.22\n",
        "#\n",
        "\n",
        "# def exec_html_js()\n",
        "\n",
        "import IPython\n",
        "from IPython.display import display, HTML\n",
        "from google.colab.output import eval_js\n",
        "\n",
        "def exec_html_js():\n",
        "  htm = HTML('''\n",
        "\n",
        "\n",
        "<!DOCTYPE html>\n",
        "<html>\n",
        "<head>\n",
        "<meta charset=\"utf-8\">\n",
        "<title>js042_bccMetalAFS</title>\n",
        "<script type=\"text/javascript\">\n",
        "\n",
        "// %%%%%%%%%%%%%%%%%%%%  javaScript  %%%%%%%%%%%%%%%%%%%%\n",
        "\n",
        "'use strict';\n",
        "\n",
        "/* --------------------\n",
        "//\n",
        "//  js042_bccMetalAFS\n",
        "//    Copyright(C) 2017-2023 Mitsuru Ikeuchi\n",
        "//    Released under the MIT license ( https://opensource.org/licenses/MIT )\n",
        "//\n",
        "//    ver 0.0.0  2017.06.19 created, last updated on 2018.11.19\n",
        "//    ver 0.0.1  2019.01.17 v1, last updated on 2021.06.02\n",
        "//    ver 0.0.2  2021.11.01 v2, last updated on 2021.11.01\n",
        "//    ver 0.0.3  2023.03.12 v3, last updated on 2023.08.24\n",
        "//\n",
        "// --------------------  molecular dynamics 3D - Finnis-Sinclair potential + Ackland correction\n",
        "//\n",
        "// - method: velocity Verlet Algorithm\n",
        "//      (1) vi = vi + (Fi/mi)*(0.5dt)\n",
        "//      (2) ri = ri + vi*dt\n",
        "//      (3) calculation Fi <- {r1,r2,...,rn} Fi=sum(Fij,j=1 to n),Fij=F(ri-rj)\n",
        "//      (4) vi = vi + (Fi/mi)*(0.5dt)\n",
        "//      (5) goto (1)\n",
        "//\n",
        "// - Finnis-Sinclair potential + Ackland correction\n",
        "//     original paper\n",
        "//       M. W. Finnis and J. E. Sinclair ; Phil. Mag. A, Vol. 50, No. 1, p.45-55 (1984)\n",
        "//     core correction\n",
        "//       G. J. Ackland and R. Thetford ; Phil. Mag. A, Vol. 56, No. 1, p.15-30 (1987)\n",
        "//\n",
        "//   total energy : E_tot\n",
        "//     E_tot = (1/2) Sum[ V(r_ij), {i,j} ] - Sum[ F(rho_i), {i} ]\n",
        "//\n",
        "//   pair-potential V(r_ij)\n",
        "//     V(r_ij) = (r-c)^2 (c0 + c1 r + c2 r^2), (r<=c else 0)\n",
        "//   (Ackland core correction)\n",
        "//     V(r_ij) = (r-c)^2 (c0 + c1 r + c2 r^2) + B (b0-r)^3 exp(-alpha r), (r<b0<c)\n",
        "//\n",
        "//   n-body (embedding) function F(rho)\n",
        "//     F(rho) = A sqrt(rho)\n",
        "//   electronic density at host atom i\n",
        "//     rho_i = Sum[ fai(r_ij), {j} ]\n",
        "//\n",
        "//   electronic density function\n",
        "//     fai(r) = (r-d)^2 (r<=d else 0)\n",
        "//   (Ackland correction)\n",
        "//     fai(r) = (r-d)^2 + B(r-d)^3/d (r<=d else 0)\n",
        "//\n",
        "//   effective pair-potential V_eff(r)\n",
        "//     (F\"=0 apploximation)\n",
        "//     V_eff(r) = V(r) - 2 A F' fai(r)\n",
        "//     ( F' = d F(rho)/drho )\n",
        "//\n",
        "//   force = -dV_eff/dr\n",
        "//         = -dV(r)/dr + 2 A fpi dfai(r)/dr,  fpi = dF/drho\n",
        "//\n",
        "// --------------------\n",
        "*/\n",
        "\n",
        "const bccMetalAFS = (function(){ // ====================  bccMetalAFS Module  ====================\n",
        "\n",
        "\tconst g_AMU = 1.66053904e-27;\t\t\t\t\t// (kg) atomic mass unit\n",
        "\tconst g_kB = 1.380649e-23;\t\t\t\t\t\t// (J/K) Boltzmann's constant\n",
        "\tconst g_EE = 1.602176634e-19;\t\t\t\t\t// (C) electron charge, energy : 1(eV) = EE(J)\n",
        "\tconst g_nMax = 8000;\n",
        "\n",
        "\tlet g_MAT1 = 2;\t\t\t\t\t\t\t\t\t// kind of particles  0:W 1:Mo 2:Fe 3:Cr 4:Ta 5:Nb 6:V\n",
        "\tlet g_nParticles =1000;\t\t\t\t\t\t\t// number of particles\n",
        "\tlet g_sysTime = 0.0;\t\t\t\t\t\t\t// (s) system time\n",
        "\tlet g_timeStep =  1.0*1.0e-15;\t\t\t\t\t// (s) time step dt\n",
        "\tlet g_xMax = 4.0E-9;\t\t\t\t\t\t\t// (m) x-Box size\n",
        "\tlet g_yMax = 4.0E-9;\t\t\t\t\t\t\t// (m) y-Box size\n",
        "\tlet g_zMax = 4.0E-9;\t\t\t\t\t\t\t// (m) z-Box size\n",
        "\tlet g_Nsx = Math.floor(g_xMax/5e-10)+1; \t\t// use pre-registration section[Nsx][Nsy][Nsz]\n",
        "\tlet g_Nsy = Math.floor(g_xMax/5e-10)+1; \t\t// use pre-registration section[Nsx][Nsy][Nsz]\n",
        "\tlet g_Nsz = Math.floor(g_xMax/5e-10)+1; \t\t// use pre-registration section[Nsx][Nsy][Nsz]\n",
        "\n",
        "\tconst g_xx = dim1( g_nMax );\t\t\t\t\t// (m) x-component of i-th particle position\n",
        "\tconst g_yy = dim1( g_nMax );\t\t\t\t\t// (m) y-component of i-th particle position\n",
        "\tconst g_zz = dim1( g_nMax );\t\t\t\t\t// (m) z-component of i-th particle position\n",
        "\tconst g_vx = dim1( g_nMax );\t\t\t\t\t// (m/s) x-component of i-th particle velocity\n",
        "\tconst g_vy = dim1( g_nMax );\t\t\t\t\t// (m/s) y-component of i-th particle velocity\n",
        "\tconst g_vz = dim1( g_nMax );\t\t\t\t\t// (m/s) z-component of i-th particle velocity\n",
        "\tconst g_ffx = dim1( g_nMax );\t\t\t\t\t// (N) x-component of total force applied i-th particle\n",
        "\tconst g_ffy = dim1( g_nMax );\t\t\t\t\t// (N) y-component of total force applied i-th particle\n",
        "\tconst g_ffz = dim1( g_nMax );\t\t\t\t\t// (N) z-component of total force applied i-th particle\n",
        "\t//const g_mas = dim1( g_nMax );\t\t\t\t\t// (kg) mass of i-th particle\n",
        "\t//const g_kind = dimInt1( g_nMax );\t\t\t\t// kind of i-th particle\n",
        "\tconst g_reg = dimInt2( g_nMax, 50 );\t\t\t// reg[i][0]:total number of particles proximity i-th particle\n",
        "\t\t\t\t\t\t\t\t\t\t\t\t\t// reg[i][j]:particle number of proximity i-th particle, (j>0)\n",
        "\tconst g_rijReg = dim2( g_nMax, 50 );\t\t\t// memory of rij(distance of i-th particle to j-th particle)\n",
        "\tconst g_regNr = dimInt2( g_nMax, 100 );\t\t\t// regNr[i][0]:total number of particles near i-th particle\n",
        "\t\t\t\t\t\t\t\t\t\t\t\t\t// regNr[i][j]:particle number near i-th particle, (j>0)\n",
        "\tconst g_section = dimInt4( g_Nsx, g_Nsy, g_Nsz, 50 ); // section[i][j][k][0]: total number of particles in section\n",
        "\t\t\t\t\t\t\t\t\t\t\t\t\t\t  // section[i][j][k][ip]: k-th particle number in section\n",
        "\n",
        "\tfunction dim1( n ) {\n",
        "\t\treturn new Float64Array( n );\n",
        "\t}\n",
        "\n",
        "\tfunction dimInt1( n ) {\n",
        "\t\treturn new Int32Array( n );\n",
        "\t}\n",
        "\n",
        "\tfunction dim2( ni, nj ) {\n",
        "\t\tlet a = [];\n",
        "\t\tfor (let i=0; i<ni; i++) {\n",
        "\t\t\ta[i] = new Float64Array( nj );\n",
        "\t\t}\n",
        "\t\treturn a;\n",
        "\t}\n",
        "\n",
        "\tfunction dimInt2( ni, nj ) {\n",
        "\t\tlet a = [];\n",
        "\t\tfor (let i=0; i<ni; i++) {\n",
        "\t\t\ta[i] = new Int32Array( nj );\n",
        "\t\t}\n",
        "\t\treturn a;\n",
        "\t}\n",
        "\n",
        "\tfunction dimInt3( ni, nj, nk ) {\n",
        "\t\tlet a = [];\n",
        "\t\tfor (let i=0; i<ni; i++) {\n",
        "\t\t\ta[i] = [];\n",
        "\t\t\tfor (let j=0; j<nj; j++) {\n",
        "\t\t\t\ta[i][j] =  new Int32Array( nk );\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t\treturn a;\n",
        "\t}\n",
        "\n",
        "\tfunction dimInt4( ni, nj, nk, nl ) {\n",
        "\t\tlet a = [];\n",
        "\t\tfor (let i=0; i<ni; i++) {\n",
        "\t\t\ta[i] = [];\n",
        "\t\t\tfor (let j=0; j<nj; j++) {\n",
        "\t\t\t\ta[i][j] = [];\n",
        "\t\t\t\tfor (let k=0; k<nk; k++) {\n",
        "\t\t\t\t\ta[i][j][k] = new Int32Array( nl );\n",
        "\t\t\t\t}\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t\treturn a;\n",
        "\t}\n",
        "\n",
        "\n",
        "\t// --------------------  Finnis-Sinclair potential + Ackland correction data  --------------------\n",
        "\n",
        "\t// F-S potential parameter\n",
        "\tlet g_FSmass = 183.85*g_AMU;\t//   mass(kg)\n",
        "\tlet g_FSd = 4.400224;\t\t\t//   d(A)\n",
        "\tlet g_FSA = 1.896373;\t\t\t//   A(eV)\n",
        "\tlet g_FSb = 0.0;\t\t\t\t//   b\n",
        "\tlet g_FSc = 3.25;\t\t\t\t//   c(A)\n",
        "\tlet g_FSc0 = 47.1346499;\t\t//   c0\n",
        "\tlet g_FSc1 = -33.7665655;\t\t//   c1\n",
        "\tlet g_FSc2 = 6.2541999;\t\t\t//   c2\n",
        "\tlet g_FSlattice = 3.16*1.0e-10;\t//   lattice constant(m)\n",
        "\n",
        "\t// Ackland correction parameter\n",
        "\tlet g_FSbb = 90.3;\t\t\t\t//   B(eV/A^3)\n",
        "\tlet g_FSalpha = 1.2;\t\t\t//   alpha\n",
        "\tlet g_FSb0 = 2.7411;\t\t\t//   b0(A)\n",
        "\n",
        "\tconst g_FS = [\n",
        "\t\t// 0 mass      1 d      2 A(eV)  3 b  4 c  5 c0      6 c1        7 c2      8 a   9 factor 10 str\n",
        "\t\t[183.85 *g_AMU,4.400224,1.896373,0.0,3.25,47.1346499,-33.7665655, 6.2541999, 3.16, 1.00, \"W\" ],  // 0\n",
        "\t\t[ 95.94 *g_AMU,4.114825,1.887117,0.0,3.25,43.4475218,-31.9332978, 6.0804249, 3.15, 1.00, \"Mo\"],  // 1\n",
        "\t\t[ 55.847*g_AMU,3.569745,1.828905,1.8,3.40, 1.2371147, -0.3592185,-0.0385607, 2.87, 1.00, \"Fe\"],  // 2\n",
        "\t\t[ 51.996*g_AMU,3.915720,1.453418,1.8,2.90,29.1429813,-23.3975027, 4.7578297, 2.88, 1.00, \"Cr\"],  // 3\n",
        "\t\t[180.948*g_AMU,4.076980,2.591061,0.0,4.20, 1.2157373,  0.0271471,-0.1217350, 3.30, 1.00, \"Ta\"],  // 4\n",
        "\t\t[ 92.906*g_AMU,3.915354,3.013789,0.0,4.20,-1.5640104,  2.0055779,-0.4663764, 3.30, 0.99, \"Nb\"],  // 5\n",
        "\t\t[ 50.942*g_AMU,3.692767,2.010637,0.0,3.80,-0.8816318,  1.4907756,-0.3976370, 3.03, 1.00, \"V\" ] ];// 6\n",
        "\n",
        "\tconst g_Ackland = [\n",
        "\t\t//0 B(eV/A3)  1 alpha   2 b0(A)\n",
        "\t\t[   90.3,     1.2,      2.7411 ],  // 0 W\n",
        "\t\t[ 1223.0,     3.9,      2.7255 ],  // 1 Mo\n",
        "\t\t[    0.0,     1.0,      0.0    ],  // 2 Fe\n",
        "\t\t[    0.0,     1.0,      0.0    ],  // 3 Cr\n",
        "\t\t[   91.0,     1.05,     2.8629 ],  // 4 Ta\n",
        "\t\t[   48.0,     0.8,      2.8585 ],  // 5 Nb\n",
        "\t\t[   23.0,     0.5,      2.6320 ] ];// 6 V\n",
        "\n",
        "\tconst g_rCollision = [];\t\t// (m) bond[kind]/2^(1/6), (as collision radius of L-J potential)\n",
        "\tconst g_rBond = [];\t\t\t\t// (m) bond length == 2.0*g_rBond[kind]\n",
        "\tconst g_massOf = [];\t\t\t// (kg) massOf[kind] : mass of kind\n",
        "\tconst g_strOf = [];\t\t\t\t// strOf[kind] : string of kind, such as \"Fe\"\n",
        "\tconst g_colorOf = [];\t\t\t// colorOf[kind] : color of kind\n",
        "\n",
        "\t(function() {\n",
        "\t\tconst n=g_FS.length;\n",
        "\t\tfor (let i=0; i<n; i++) {\n",
        "\t\t\tg_rCollision[i] = g_FS[i][8]*1.0e-10*Math.sqrt(3)/4.0/1.12246;\n",
        "\t\t\tg_rBond[i] = g_FS[i][8]*1.0e-10*Math.sqrt(3)/4.0;\n",
        "\t\t\tg_massOf[i] = g_FS[i][0];\n",
        "\t\t\tg_strOf[i] = g_FS[i][10];\n",
        "\t\t\tg_colorOf[i] = \"\";\n",
        "\t\t}\n",
        "\t}());\n",
        "\n",
        "\tfunction setFSParam(m1) {\n",
        "\t\tg_FSmass = g_FS[m1][0];\n",
        "\t\tg_FSd = g_FS[m1][1];\n",
        "\t\tg_FSA = g_FS[m1][2];\n",
        "\t\tg_FSb = g_FS[m1][3];\n",
        "\t\tg_FSc = g_FS[m1][4];\n",
        "\t\tg_FSc0 = g_FS[m1][5];\n",
        "\t\tg_FSc1 = g_FS[m1][6];\n",
        "\t\tg_FSc2 = g_FS[m1][7];\n",
        "\t\tg_FSlattice = g_FS[m1][8]*1.0e-10*g_FS[m1][9];\n",
        "\n",
        "\t\tg_FSbb = g_Ackland[m1][0];\n",
        "\t\tg_FSalpha = g_Ackland[m1][1];\n",
        "\t\tg_FSb0 = g_Ackland[m1][2];\n",
        "\t}\n",
        "\n",
        "\n",
        "\t// --------------------  set initial condition  --------------------\n",
        "\n",
        "\tfunction setInitialCondition( material, BoxSizeInNM, contTemp ) {\n",
        "\t\tg_sysTime = 0.0;\n",
        "\t\tg_xMax = BoxSizeInNM*1.0e-9;\n",
        "\t\tg_yMax = BoxSizeInNM*1.0e-9;\n",
        "\t\tg_zMax = BoxSizeInNM*1.0e-9;\n",
        "\t\tg_Nsx = Math.floor(g_xMax/5e-10)+1;\n",
        "\t\tg_Nsy = Math.floor(g_xMax/5e-10)+1;\n",
        "\t\tg_Nsz = Math.floor(g_xMax/5e-10)+1;\n",
        "\t\tg_MAT1 = material;\n",
        "\t\tsetFSParam(g_MAT1);\n",
        "\t\tg_nParticles = setBccCrystal(0,8);\n",
        "\t\tajustVelocity(contTemp);\n",
        "\t}\n",
        "\n",
        "\tfunction setBccCrystal(ii,n) {\n",
        "\t\tconst a = g_FSlattice;\n",
        "\t\tconst s = 0.5*(g_xMax - a*n)+0.25*a;\n",
        "\t\tlet i = ii;\n",
        "\t\tfor (let ix=0; ix<n; ix++) {\n",
        "\t\t\tfor (let iy=0; iy<n; iy++) {\n",
        "\t\t\t\tfor (let iz=0; iz<n; iz++) {\n",
        "\t\t\t\t\tsetParticle(i,a*ix+s,a*iy+s,a*iz+s);\n",
        "\t\t\t\t\ti++;\n",
        "\t\t\t\t\tsetParticle(i,a*ix+0.5*a+s,a*iy+0.5*a+s,a*iz+0.5*a+s);\n",
        "\t\t\t\t\ti++;\n",
        "\t\t\t\t}\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t\treturn i;\n",
        "\t}\n",
        "\n",
        "\tfunction setParticle(i,x,y,z) {\n",
        "\t\tg_xx[i] = x;\n",
        "\t\tg_yy[i] = y;\n",
        "\t\tg_zz[i] = z;\n",
        "\t\tg_vx[i] = 200.0*normalRandom3();\n",
        "\t\tg_vy[i] = 200.0*normalRandom3();\n",
        "\t\tg_vz[i] = 200.0*normalRandom3();\n",
        "\t\tg_ffx[i] = 0.0;\n",
        "\t\tg_ffy[i] = 0.0;\n",
        "\t\tg_ffz[i] = 0.0;\n",
        "\t}\n",
        "\n",
        "\t// normal distributed random number: -3.0 <= normalRandom3() < 3.0\n",
        "\tfunction normalRandom3() {\n",
        "\t\treturn (Math.random()+Math.random()+Math.random()+Math.random()+Math.random()+Math.random()-3.0);\n",
        "\t}\n",
        "\n",
        "\n",
        "\t// --------------------  time evolution  --------------------\n",
        "\n",
        "\tfunction timeEvolution( tempMode, contTemp ) {\n",
        "\t\tif (tempMode==1) ajustVelocity(contTemp);\n",
        "\t\tregNear();\n",
        "\t\tfor (let i=0; i<10; i++) {\n",
        "\t\t\tmoveParticles(g_timeStep);\n",
        "\t\t\tg_sysTime += g_timeStep;\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction moveParticles(dt) {\n",
        "\t\tconst nn = g_nParticles, dtv2 = dt/2.0;\n",
        "\t\tconst a = dtv2/g_FSmass;\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tg_vx[i] += a*g_ffx[i];\n",
        "\t\t\tg_vy[i] += a*g_ffy[i];\n",
        "\t\t\tg_vz[i] += a*g_ffz[i];\n",
        "\t\t\tg_xx[i] += g_vx[i]*dt;\n",
        "\t\t\tg_yy[i] += g_vy[i]*dt;\n",
        "\t\t\tg_zz[i] += g_vz[i]*dt;\n",
        "\t\t}\n",
        "\t\tsetForce();\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tg_vx[i] += a*g_ffx[i];\n",
        "\t\t\tg_vy[i] += a*g_ffy[i];\n",
        "\t\t\tg_vz[i] += a*g_ffz[i];\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction setForce() {\n",
        "\t\tconst nn = g_nParticles, s05 = 0.5*3.418e-10; // Ar sigma=3.418e-10\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tg_ffx[i] = 0.0;\n",
        "\t\t\tg_ffy[i] = 0.0;\n",
        "\t\t\tg_ffz[i] = 0.0;\n",
        "\t\t}\n",
        "\t\tlet xxvir = 0.0, yyvir = 0.0, zzvir = 0.0;\n",
        "\t\tlet xyvir = 0.0, xzvir = 0.0, yzvir = 0.0;\n",
        "\n",
        "\t\tregProximity();\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tconst fpi = dFdroh(i);\n",
        "\t\t\tfor (let k=1; k<g_reg[i][0]; k++) {\n",
        "\t\t\t\tconst j = g_reg[i][k];\n",
        "\t\t\t\tif (j>i) {\n",
        "\t\t\t\t\tconst xij = g_xx[i] - g_xx[j];\n",
        "\t\t\t\t\tconst yij = g_yy[i] - g_yy[j];\n",
        "\t\t\t\t\tconst zij = g_zz[i] - g_zz[j];\n",
        "\n",
        "\t\t\t\t\tconst rij = g_rijReg[i][k];\n",
        "\t\t\t\t\tconst f = forceAFS(rij,fpi);\n",
        "\t\t\t\t\tconst fxij = f*xij/rij;\n",
        "\t\t\t\t\tconst fyij = f*yij/rij;\n",
        "\t\t\t\t\tconst fzij = f*zij/rij;\n",
        "\n",
        "\t\t\t\t\tg_ffx[i] +=  fxij;\n",
        "\t\t\t\t\tg_ffy[i] +=  fyij;\n",
        "\t\t\t\t\tg_ffz[i] +=  fzij;\n",
        "\t\t\t\t\tg_ffx[j] += -fxij;\n",
        "\t\t\t\t\tg_ffy[j] += -fyij;\n",
        "\t\t\t\t\tg_ffz[j] += -fzij;\n",
        "\t\t\t\t}\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tg_ffx[i] += boundaryForce(g_xx[i]+s05)+boundaryForce(g_xx[i]-g_xMax-s05);\n",
        "\t\t\tg_ffy[i] += boundaryForce(g_yy[i]+s05)+boundaryForce(g_yy[i]-g_yMax-s05);\n",
        "\t\t\tg_ffz[i] += boundaryForce(g_zz[i]+s05)+boundaryForce(g_zz[i]-g_zMax-s05);\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction boundaryForce(r) {\n",
        "\t\tconst ri = (3.418e-10/r);\n",
        "\t\tconst r6 = ri*ri*ri*ri*ri*ri;\n",
        "\t\treturn (24.0*0.5*1.711e-21*r6*(2.0*r6-1.0)/r);\n",
        "\t}\n",
        "\n",
        "\t//--- registration of near atoms\n",
        "\n",
        "\tfunction regNear() {\n",
        "\t\tconst nn=g_nParticles, nsx=g_Nsx, nsy=g_Nsy, nsz=g_Nsz;\n",
        "\t\tpreRegistration();\n",
        "\t\tlet rrg = g_FSc*1.0e-10;\n",
        "\t\tif (rrg<g_FSd*1.0e-10) {\n",
        "\t\t\trrg = g_FSd*1.0e-10;\n",
        "\t\t}\n",
        "\t\trrg += 5000.0*g_timeStep*10.0;\n",
        "\t\tconst rrg2 = rrg*rrg;\n",
        "\t\tfor (let ip=0; ip<nn; ip++) {\n",
        "\t\t\tlet kp = 1;\n",
        "\t\t\tlet i0 = Math.floor(nsx*(g_xx[ip]-rrg)/g_xMax); if (i0<0) i0 = 0;\n",
        "\t\t\tlet i1 = Math.floor(nsx*(g_xx[ip]+rrg)/g_xMax); if (i1>=nsx) i1 = nsx-1;\n",
        "\t\t\tlet j0 = Math.floor(nsy*(g_yy[ip]-rrg)/g_yMax); if (j0<0) j0 = 0;\n",
        "\t\t\tlet j1 = Math.floor(nsy*(g_yy[ip]+rrg)/g_yMax); if (j1>=nsy) j1 = nsy-1;\n",
        "\t\t\tlet k0 = Math.floor(nsz*(g_zz[ip]-rrg)/g_zMax); if (k0<0) k0 = 0;\n",
        "\t\t\tlet k1 = Math.floor(nsz*(g_zz[ip]+rrg)/g_zMax); if (k1>=nsz) k1 = nsz-1;\n",
        "\t\t\tfor (let i=i0; i<=i1; i++) {\n",
        "\t\t\t\tfor (let j=j0; j<=j1; j++) {\n",
        "\t\t\t\t\tfor (let k=k0; k<=k1; k++) {\n",
        "\t\t\t\t\t\tfor (let iq=1; iq<=g_section[i][j][k][0]; iq++) {\n",
        "\t\t\t\t\t\t\tconst jp = g_section[i][j][k][iq];\n",
        "\t\t\t\t\t\t\tif (jp!=ip) {\n",
        "\t\t\t\t\t\t\t\tconst r2 = distance2(ip, jp);\n",
        "\t\t\t\t\t\t\t\tif (r2<rrg2) {\n",
        "\t\t\t\t\t\t\t\t\tg_regNr[ip][kp] = jp;\n",
        "\t\t\t\t\t\t\t\t\tkp += 1;\n",
        "\t\t\t\t\t\t\t\t}\n",
        "\t\t\t\t\t\t\t}\n",
        "\t\t\t\t\t\t}\n",
        "\t\t\t\t\t}\n",
        "\t\t\t\t}\n",
        "\t\t\t}\n",
        "\t\t\tg_regNr[ip][0] = kp;\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction distance2(i,j) {\n",
        "\t\tconst xij = g_xx[i]-g_xx[j], yij = g_yy[i]-g_yy[j], zij = g_zz[i]-g_zz[j];\n",
        "\t\treturn xij*xij+yij*yij+zij*zij;\n",
        "\t}\n",
        "\n",
        "\t// pre-registration\n",
        "\t//   section[i][j][k][0] : number of particles in section (i,j,k)\n",
        "\t//   set section[i][j][k][ip] : ip-th particle index in section (i,j,k)\n",
        "\t//     (ip = 1,..., section[i][j][k][0])\n",
        "\tfunction preRegistration() {\n",
        "\t\tconst nn=g_nParticles, nsx=g_Nsx, nsy=g_Nsy, nsz=g_Nsz;\n",
        "\t\tfor (let i=0; i<nsx; i++) {\n",
        "\t\t\tfor (let j=0; j<nsy; j++) {\n",
        "\t\t\t\tfor (let k=0; k<nsz; k++) {\n",
        "\t\t\t\t\tg_section[i][j][k][0] = 0;\n",
        "\t\t\t\t}\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t\tfor (let ip=0; ip<nn; ip++) {\n",
        "\t\t\tlet i = Math.floor(nsx*g_xx[ip]/g_xMax); if (i>=nsx) i = nsx-1;\n",
        "\t\t\tlet j = Math.floor(nsy*g_yy[ip]/g_yMax); if (j>=nsy) j = nsy-1;\n",
        "\t\t\tlet k = Math.floor(nsz*g_zz[ip]/g_zMax); if (k>=nsz) k = nsz-1;\n",
        "\t\t\tconst iq = g_section[i][j][k][0]+1;\n",
        "\t\t\tg_section[i][j][k][0] = iq;\n",
        "\t\t\tg_section[i][j][k][iq] = ip;\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\t// registration proximity\n",
        "\t//   regNr[i][0] : number of proximity regNr[i][k] : i-th particle index k = 1,...,regNr[i][0])\n",
        "\t//   rijReg[i][k] : distance(i,k)\n",
        "\t//\n",
        "\tfunction regProximity() {\n",
        "\t\tconst nn=g_nParticles;\n",
        "\t\tlet rrg = g_FSc*1.0e-10;\n",
        "\t\tif (rrg<g_FSd*1.0e-10) {\n",
        "\t\t\trrg = g_FSd*1.0e-10;\n",
        "\t\t}\n",
        "\t\tconst rrg2 = rrg*rrg;\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tlet k = 1;\n",
        "\t\t\tfor (let jj=1; jj<g_regNr[i][0]; jj++) {\n",
        "\t\t\t\tconst j = g_regNr[i][jj];\n",
        "\t\t\t\tconst r2 = distance2(i,j);\n",
        "\t\t\t\tif (r2<rrg2) {\n",
        "\t\t\t\t\tg_reg[i][k] = j;\n",
        "\t\t\t\t\tg_rijReg[i][k] = Math.sqrt(r2);\n",
        "\t\t\t\t\tk += 1;\n",
        "\t\t\t\t}\n",
        "\t\t\t}\n",
        "\t\t\tg_reg[i][0] = k;\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\t//--- force ( Finnis-Sinclair potential + Ackland correction )\n",
        "\n",
        "\tfunction forceAFS(r,fpi) {\n",
        "\t\tconst ra = r*1.0e10;\n",
        "\t\tconst rt = -dpotVdr(ra)+2.0*g_FSA*fpi*dfaidr(ra);\n",
        "\t\treturn ( rt*g_EE/1.0e-10 );\n",
        "\t}\n",
        "\n",
        "\tfunction dFdroh(i) {\n",
        "\t\tconst rh = roh(i);\n",
        "\t\tlet ret = 0.0;\n",
        "\t\tif (rh>0.0) {\n",
        "\t\t\tret = 0.5*Math.sqrt(1.0/rh);\n",
        "\t\t}\n",
        "\t\treturn ret;\n",
        "\t}\n",
        "\n",
        "\tfunction roh(i) {\n",
        "\t\tlet s=0.0;\n",
        "\t\tfor (let k=1; k<g_reg[i][0]; k++) {\n",
        "\t\t\tconst j = g_reg[i][k];\n",
        "\t\t\ts += fai( g_rijReg[i][k]*1.0e10 );\n",
        "\t\t}\n",
        "\t\treturn s;\n",
        "\t}\n",
        "\n",
        "\tfunction potV(r) {\n",
        "\t\tif (r<g_FSc) {\n",
        "\t\t\tif (r>=g_FSb0) {\n",
        "\t\t\t\treturn (r-g_FSc)*(r-g_FSc)*(g_FSc0+g_FSc1*r+g_FSc2*r*r);\n",
        "\t\t\t} else {\n",
        "\t\t\t\treturn ( (r-g_FSc)*(r-g_FSc)*(g_FSc0+g_FSc1*r+g_FSc2*r*r)\n",
        "\t\t\t\t\t\t\t+ g_FSbb*(g_FSb0-r)*(g_FSb0-r)*(g_FSb0-r)*Math.exp(-g_FSalpha*r) );\n",
        "\t\t\t}\n",
        "\t\t} else {\n",
        "\t\t\treturn 0.0;\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction dpotVdr(r) {\n",
        "\t\tif (r<g_FSc) {\n",
        "\t\t\tif (r>=g_FSb0) {\n",
        "\t\t\t\treturn 2.0*(r-g_FSc)*(g_FSc0+g_FSc1*r+g_FSc2*r*r)+(r-g_FSc)*(r-g_FSc)*(g_FSc1+2.0*g_FSc2*r);\n",
        "\t\t\t} else {\n",
        "\t\t\t\treturn ( 2.0*(r-g_FSc)*(g_FSc0+g_FSc1*r+g_FSc2*r*r)+(r-g_FSc)*(r-g_FSc)*(g_FSc1+2.0*g_FSc2*r)\n",
        "\t\t\t\t\t\t\t+ g_FSbb*(g_FSb0-r)*(g_FSb0-r)*Math.exp(-g_FSalpha*r)*(-3.0-g_FSalpha*(g_FSb0-r)) );\n",
        "\t\t\t}\n",
        "\t\t} else {\n",
        "\t\t\treturn 0.0;\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction fai(r) {\n",
        "\n",
        "\t\tif (r<g_FSd) {\n",
        "\t\t\treturn ( (r-g_FSd)*(r-g_FSd)*(1.0+g_FSb*(r-g_FSd)/g_FSd) );\n",
        "\t\t} else {\n",
        "\t\t\treturn 0.0;\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction dfaidr(r) {\n",
        "\t\tif (r<g_FSd) {\n",
        "\t\t\treturn ( 2.0*(r-g_FSd)+3.0*g_FSb*(r-g_FSd)*(r-g_FSd)/g_FSd );\n",
        "\t\t} else {\n",
        "\t\t\treturn 0.0;\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\n",
        "\t// --------------------  utility  --------------------\n",
        "\n",
        "\tfunction systemTemperature() {\n",
        "\t\tconst nn=g_nParticles;\n",
        "\t\tlet ek=0.0;  //kinetic energy (J)\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tek = ek + 0.5*g_FSmass*(g_vx[i]*g_vx[i]+g_vy[i]*g_vy[i]+g_vz[i]*g_vz[i]);\n",
        "\t\t}\n",
        "\t\treturn 2.0*ek/(3.0*nn*g_kB); //2D: E/N=kT, 3D: E/N=(3/2)kT\n",
        "\t}\n",
        "\n",
        "\tfunction ajustVelocity(temp) {\n",
        "\t\tconst nn=g_nParticles;\n",
        "\t\tconst a = Math.sqrt(temp/systemTemperature());\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tg_vx[i] = a*g_vx[i];\n",
        "\t\t\tg_vy[i] = a*g_vy[i];\n",
        "\t\t\tg_vz[i] = a*g_vz[i];\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction regMax() {\n",
        "\t\tconst nn=g_nParticles;\n",
        "\t\tlet m=0;\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tif (g_reg[i][0]>m) {\n",
        "\t\t\t\tm = g_reg[i][0];\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t\treturn m;\n",
        "\t}\n",
        "\n",
        "\n",
        "\t// --------------------  public  --------------------\n",
        "\n",
        "\treturn {\n",
        "\t\tinit:\t\t\tsetInitialCondition,\t// setInitialCondition( material, boxSizeInNM, contTemp)\n",
        "\t\tevolve:\t\t\ttimeEvolution,\t\t\t// timeEvolution( tempMode, contTemp )\n",
        "\n",
        "\t\tsetTemp:\t\tajustVelocity,\t\t\t// ajustVelocity( temp )\n",
        "\n",
        "\t\tgetSysParam:\tfunction() { return [ g_nParticles, g_timeStep, g_xMax, g_yMax, g_zMax, g_MAT1 ]; },\n",
        "\t\tgetNow:\t\t\tfunction() { return [ g_sysTime, systemTemperature(), g_strOf[g_MAT1] ]; },\n",
        "\t\tgetrBond:\t\tfunction(kind) { return g_rBond[kind]; },\n",
        "\t\tgetNearList:\tfunction(i) { return g_reg[i]; },\n",
        "\t\tgetPosition:\tfunction(i) { return [ g_xx[i], g_yy[i], g_zz[i] ]; },\n",
        "\t\tgetVelocity:\tfunction(i) { return [ g_vx[i], g_vy[i], g_vz[i] ]; },\n",
        "\t\tgetForce:\t\tfunction(i) { return [ g_ffx[i], g_ffy[i], g_ffz[i] ]; },\n",
        "\t};\n",
        "\n",
        "})(); // ====================  bccMetalAFS end  ====================\n",
        "\n",
        "\n",
        "const js042 = (function(){ // ====================  js Module  ====================\n",
        "\n",
        "\tconst theModule = bccMetalAFS;\n",
        "\tconst xCanvasSize = 480;\t// in pixel\n",
        "\tconst yCanvasSize = 480;\t// in pixel\n",
        "\tlet canvas;\n",
        "\tlet ctx;\n",
        "\n",
        "\tlet v_theme = 2; // = kind  0:W, 1:Mo, 2:Fe, 3:Cr, 4:Ta, 5:Nb, 6:V\n",
        "\tlet v_BoxSizeInNM = 3.2;\n",
        "\tlet v_tempMode = 1;\n",
        "\tlet v_contTemp = 200.0;\n",
        "\n",
        "\tlet p_nParticles, p_timeStep, p_xMax, p_yMax, p_zMax, p_kind1; // = theModule.getSysParam();\n",
        "\tlet sysTime, sysTemp, kindStr;\n",
        "\tlet nowData = [];\n",
        "\tlet xxList = [];\n",
        "\tlet yyList = [];\n",
        "\tlet zzList = [];\n",
        "\tlet vxList = [];\n",
        "\tlet vyList = [];\n",
        "\tlet vzList = [];\n",
        "\n",
        "\tlet nCalc = 1;\n",
        "\tlet dispMode = 0;\n",
        "\tlet resetFlag = true;\n",
        "\tlet pauseFlag = false;\n",
        "\tlet stepFlag = false;\n",
        "\n",
        "\tlet breakFlag = false;\n",
        "\tlet perticleFlag = true;\n",
        "\n",
        "\n",
        "\tfunction main() {\n",
        "\t\tresetFlag = true;\n",
        "\t\tsetCanvas( 'canvas_box', xCanvasSize, yCanvasSize );\n",
        "\t\tinitDom();\n",
        "\n",
        "\t\tanimate();\n",
        "\n",
        "\t\tfunction setCanvas( canvasID, width, height ) {\n",
        "\t\t\tcanvas = document.getElementById( canvasID );\n",
        "\t\t\tcanvas.width  = width;\n",
        "\t\t\tcanvas.height = height;\n",
        "\t\t\tctx = canvas.getContext('2d');\n",
        "\t\t\tctx.font = \"16px 'sans-serif'\";\n",
        "\t\t\tctx.textBaseline = \"bottom\";\n",
        "\t\t\tctx.textAlign = \"left\";\n",
        "\t\t\tctx.lineWidth = 1;\n",
        "\t\t\tg3d.setMouseOnCanvas( canvas ); // 3D graphics\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\n",
        "\tfunction animate() {\n",
        "    if ( breakFlag ) return;\n",
        "\n",
        "\t\tif ( resetFlag ) {\n",
        "\t\t\tresetFlag = false;\n",
        "\t\t\ttheModule.init( v_theme, v_BoxSizeInNM, v_contTemp ); // ( nn, BoxSizeInNM, contTemp )\n",
        "\t\t\t[ p_nParticles, p_timeStep, p_xMax, p_yMax, p_zMax, p_kind1 ] = theModule.getSysParam();\n",
        "\t\t\t// g3d.init( nParticles, xMax, yMax, zMax, xCanvasSize, yCanvasSize, xBoxSize, yShift )\n",
        "\t\t\tg3d.init( p_nParticles, p_xMax, p_yMax, p_zMax, xCanvasSize, yCanvasSize, 300, 20 );\n",
        "\t\t\tperticleFlag = true;\n",
        "\t\t}\n",
        "\n",
        "\t\tif ( !pauseFlag ) {\n",
        "\t\t\tfor(let i=0; i<nCalc; i++ ) {\n",
        "\t\t\t\ttheModule.evolve( v_tempMode,v_contTemp );\n",
        "\t\t\t}\n",
        "\t\t} else if ( pauseFlag && stepFlag ) {\n",
        "\t\t\tstepFlag = false;\n",
        "\t\t\ttheModule.evolve( v_tempMode, v_contTemp );\n",
        "\t\t}\n",
        "\n",
        "\t\tdraw( ctx, dispMode );\n",
        "\n",
        "\t\tif ( perticleFlag ) setParticlesData();\n",
        "\n",
        "\t\trequestAnimationFrame( animate );\n",
        "\t}\n",
        "\n",
        "  function setParticlesData() {\n",
        "\t\tnowData = [ sysTime, sysTemp, v_theme ]; // v_theme = kind\n",
        "    for (let i=0; i<p_nParticles; i++) {\n",
        "\t\t\tlet x, y, z, vx, vy, vz;\n",
        "\t\t\t[ x, y, z ] = theModule.getPosition(i);\n",
        "\t\t\txxList[i] = x;\n",
        "\t\t\tyyList[i] = y;\n",
        "\t\t\tzzList[i] = z;\n",
        "\t\t\t[ vx, vy, vz ] = theModule.getVelocity(i);\n",
        "\t\t\tvxList[i] = vx;\n",
        "\t\t\tvyList[i] = vy;\n",
        "\t\t\tvzList[i] = vz;\n",
        "\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\n",
        "\t// --------------------  draw  --------------------\n",
        "\n",
        "\tconst ballColorData = [\n",
        "\t\t\t/*0:W */ [ 0x44, 0x44, 0xff ], /*1:Mo*/ [ 0x00, 0x88, 0xff ], /*2:Fe*/ [ 0x00, 0xff, 0xff ],\n",
        "\t\t\t/*3:Cr*/ [ 0x00, 0xff, 0x88 ], /*4:Ta*/ [ 0x00, 0xff, 0x00 ], /*5:Nb*/ [ 0x66, 0xff, 0x00 ],\n",
        "\t\t\t/*6:V */ [ 0xbb, 0xff, 0x00 ] ];\n",
        "\n",
        "\tfunction draw( ctx, dispMode ) {\n",
        "\t\tconst yTextPos= 430;\n",
        "\n",
        "\t\tctx.clearRect(0, 0, xCanvasSize, yCanvasSize);\n",
        "\n",
        "\t\tif ( dispMode==0 ) {\n",
        "\t\t\t// draw3D( ctx, nParticles, ballScale, bondFlag )\n",
        "\t\t\tdraw3D( ctx, p_nParticles, 1.0, false );\n",
        "\t\t} else if ( dispMode==1 ) {\n",
        "\t\t\tdraw3D( ctx, p_nParticles, 0.4, false );\n",
        "\t\t} else if ( dispMode==2 ) {\n",
        "\t\t\tdraw3D( ctx, p_nParticles, 0.4, true );\n",
        "\t\t} else if ( dispMode==3 ) {\n",
        "\t\t\tdraw3D( ctx, p_nParticles, 0.0, true );\n",
        "\t\t}\n",
        "\n",
        "\t\t// caption\n",
        "\t\t[ sysTime, sysTemp, kindStr ] = theModule.getNow();\n",
        "\t\tctx.fillStyle = \"#888888\";\n",
        "\t\tctx.fillText(`time = ${(sysTime*1.0e12).toFixed(1)} (ps)`, 20, yTextPos);\n",
        "\t\tctx.fillText(`Temp = ${sysTemp.toFixed(1)} (K)`, 260, yTextPos);\n",
        "\t\tctx.fillText(`material : ${kindStr}, N = ${p_nParticles}`, 20, yTextPos+20);\n",
        "\t\tctx.fillText(`control Temp = ${v_contTemp} (K)`, 260, yTextPos+20);\n",
        "\t\tctx.fillText(`box = ${(p_xMax*1.0e9).toFixed(1)}x${(p_yMax*1.0e9).toFixed(1)}x${(p_zMax*1.0e9).toFixed(1)} (nm)`,\n",
        "\t\t\t\t\t\t20, yTextPos+40);\n",
        "\t\t//ctx.fillText(\"Energy = \"+(kineticEnergy+potentialEnergy).toExponential(4)+\" (J)\", 240, yTextPos+40);\n",
        "\n",
        "\t}\n",
        "\n",
        "\tfunction draw3D( ctx, nParticles, ballScale, bondFlag ) {\n",
        "\t\tlet sc, xp, yp; [ sc, xp, yp ] = g3d.scxpypFunc(); // g3d sc, xp, yp\n",
        "\t\tconst nn = nParticles, kind = p_kind1;\n",
        "\t\tconst rBond = theModule.getrBond(kind);\n",
        "\n",
        "\t\tg3d.set3DRotatedObjects(0.0); //(rotateRateOfAyInDegree) eg. 0.0 or 0.5\n",
        "\t\tg3d.plotFarEdge(ctx, sc,xp,yp,\"#444400\"); // dark yellow\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tconst j = g3d.srtzix[i];\n",
        "\t\t\t//const zr = (g3d.ppz[j]/g_zMax+1.23)/3.0; // -0.73 < g3d.ppz[j]/g_zMax < 1.73\n",
        "\t\t\tconst zr = (g3d.ppz[j]/g_zMax+1.0)/2.73; // -0.73 < g3d.ppz[j]/g_zMax < 1.73\n",
        "\t\t\tconst col = ballColor( kind, zr );\n",
        "\t\t\tconst x = g3d.ppx[j]*sc+xp, y = g3d.ppy[j]*sc+yp, r = rBond*sc*ballScale;\n",
        "\t\t\tif ( r>0.0 ) {\n",
        "\t\t\t\tg3d.drawDisc( ctx, x, y, r, ballColor( kind, zr ) );\n",
        "\t\t\t\tg3d.strokeCircle( ctx, x, y, r, ballColor( kind, zr*0.7 ) );\n",
        "\t\t\t}\n",
        "\t\t\tif ( bondFlag ) {\n",
        "\t\t\t\tconst reg = theModule.getNearList(j);\n",
        "\t\t\t\tconst d0 = rBond*2;\n",
        "\t\t\t\tconst n = reg[0];\n",
        "\t\t\t\tlet x1, y1, z1; [ x1, y1, z1 ] = theModule.getPosition(j);\n",
        "\t\t\t\tfor (let k=1; k<n; k++) {\n",
        "\t\t\t\t\tconst jj = reg[k];\n",
        "\t\t\t\t\tlet x2, y2, z2; [ x2, y2, z2 ] = theModule.getPosition(jj);\n",
        "\t\t\t\t\tconst d = Math.sqrt( (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2) );\n",
        "\t\t\t\t\tif ( d<d0*1.2 ) {\n",
        "\t\t\t\t\t\tconst hue = Math.floor(18120+600*(d/d0-1)) % 360;\n",
        "\t\t\t\t\t\tg3d.drawLine(ctx, x, y, g3d.ppx[jj]*sc+xp, g3d.ppy[jj]*sc+yp, `hsl(${hue},100%,50%)` );\n",
        "\t\t\t\t\t}\n",
        "\t\t\t\t}\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t\tg3d.plotNearEdge(ctx, sc,xp,yp,\"#999900\"); // yellow\n",
        "\n",
        "\t\tctx.font = \"12px 'sans-serif'\";\n",
        "\t\tctx.fillStyle = \"#888888\";\n",
        "\t\tctx.fillText(`Ax=${(g3d.Ax*180/Math.PI).toFixed(1)}, Ay=${(g3d.Ay*180/Math.PI).toFixed(1)}`, 10, 15);\n",
        "\t\tctx.font = \"16px 'sans-serif'\";\n",
        "\t}\n",
        "\n",
        "\tfunction ballColor( kind, zr ) {\n",
        "\t\tconst r = Math.floor(ballColorData[kind][0]*zr);\n",
        "\t\tconst g = Math.floor(ballColorData[kind][1]*zr);\n",
        "\t\tconst b = Math.floor(ballColorData[kind][2]*zr);\n",
        "\t\treturn `rgb(${r},${g},${b})`;\n",
        "\t}\n",
        "\n",
        "\n",
        "\t// --------------------  3D graphics (particles) module  --------------------\n",
        "\t//\n",
        "\t// ver 0.0.1  2018.12.23  last updated on 2023.04.10\n",
        "\t// ver 0.0.2  2023.05.02  last updated on 2023.06.02\n",
        "\n",
        "\tlet g_nParticles, g_xMax, g_yMax, g_zMax, g_xCanvasSize, g_yCanvasSize, g_xBoxSize, g_yShift; // gloval in g3d\n",
        "\n",
        "\tconst g3d = {};\t\t\t\t// namespace of graphic 3D module\n",
        "\tg3d.mouseDownFlag = 0;\t\t// 1:on mouse down, 0:else\n",
        "\tg3d.x_mouse = 0;\t\t\t// x-position of mouse\n",
        "\tg3d.y_mouse = 0;\t\t\t// y-position of mouse\n",
        "\tg3d.x0_mouse = 0;\t\t\t// drag-started x-position of mouse\n",
        "\tg3d.y0_mouse = 0;\t\t\t// drag-started y-position of mouse\n",
        "\tg3d.zoom = 1.0;\n",
        "\n",
        "\tg3d.cx0 = 0.0;\t\t\t\t// x-rotate center (3D graphics)\n",
        "\tg3d.cy0 = 0.0;\t\t\t\t// y-rotate center (3D graphics)\n",
        "\tg3d.cz0 = 0.0;\t\t\t\t// z-rotate center (3D graphics)\n",
        "\tg3d.Ax = -Math.PI/12.0;\t\t// x-rotate angle around x-axis\n",
        "\tg3d.Ay = -Math.PI/12.0;\t\t// y-rotate angle around y-axis\n",
        "\tg3d.ddAy = 0.0;\t\t\t\t// Ay change rate for auto-rotate: eg. dday=0.5*Math.PI/180\n",
        "\tg3d.cosAx = 0.0;\t\t\t// cosAx=Math.cos(Ax)\n",
        "\tg3d.sinAx = 0.0;\t\t\t// sinAx=Math.sin(Ax)\n",
        "\tg3d.cosAy = 0.0;\t\t\t// cosAy=Math.cos(Ay)\n",
        "\tg3d.sinAy = 0.0;\t\t\t// sinAy=Math.sin(Ay)\n",
        "\n",
        "\tg3d.ppx = [];\t\t\t\t// (m) rotated x-component of i-th particle position\n",
        "\tg3d.ppy = [];\t\t\t\t// (m) rotated y-component of i-th particle position\n",
        "\tg3d.ppz = [];\t\t\t\t// (m) rotated z-component of i-th particle position\n",
        "\tg3d.srtzix = [];\t\t\t// z(depth)-sorted index: srtzix[1], srtzix[2],...,srtzix[g_nParticles]\n",
        "\n",
        "\tg3d.xApex = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\t\t// x-apex of box\n",
        "\tg3d.yApex = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\t\t// y-apex of box\n",
        "\tg3d.zApex = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\t\t// z-apex of box\n",
        "\tg3d.pxApex = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\t\t// rotated x-apex of box\n",
        "\tg3d.pyApex = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\t\t// rotated y-apex of box\n",
        "\tg3d.pzApex = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\t\t// rotated z-apex of box\n",
        "\tg3d.boxApex = [[0,0,0], [1,0,0], [0,1,0], [1,1,0], [0,0,1], [1,0,1], [0,1,1], [1,1,1] ];\n",
        "\tg3d.boxEdge = [[0,1,9], [0,2,9], [0,4,9], [1,3,9], [1,5,9], [2,3,9],\n",
        "\t\t\t\t   [2,6,9], [3,7,9], [4,5,9], [4,6,9], [5,7,9], [6,7,9] ];\n",
        "\n",
        "\t//--- set mouse on canvas\n",
        "\n",
        "\t// g3d.setMouseOnCanvas( canvas );\n",
        "\tg3d.setMouseOnCanvas = function( canvas ) {\n",
        "\t\tcanvas.addEventListener('mousemove', g3d.mouse_move);\n",
        "\t\tcanvas.addEventListener('mousedown', g3d.mouse_down);\n",
        "\t\tcanvas.addEventListener('mouseup', g3d.mouse_up);\n",
        "\t\t//canvas.addEventListener(\"mousewheel\", g3d.mouseWheel);\n",
        "\t};\n",
        "\tg3d.setMouseOnCanvas.defined = false;\n",
        "\n",
        "\tg3d.mouse_move = function(e) {\n",
        "\t\tconst pi = Math.PI;\n",
        "\n",
        "\t\tif (g3d.mouseDownFlag==1) {\n",
        "\t\t\tg3d.x_mouse = e.clientX;\n",
        "\t\t\tg3d.y_mouse = e.clientY;\n",
        "\t\t\tg3d.Ay = g3d.Ay + 0.5*(g3d.x_mouse-g3d.x0_mouse)*pi/180;\n",
        "\t\t\tif (g3d.Ay<-pi) g3d.Ay += 2*pi;\n",
        "\t\t\tif (g3d.Ay>pi) g3d.Ay += -2*pi;\n",
        "\t\t\t//g3d.Ax = g3d.Ax + 0.5*(g3d.y_mouse-g3d.y0_mouse)*pi/180;\n",
        "\t\t\tg3d.Ax = g3d.Ax - 0.5*(g3d.y_mouse-g3d.y0_mouse)*pi/180;\n",
        "\t\t\tif (g3d.Ax<-0.5*pi) g3d.Ax = -0.5*pi;\n",
        "\t\t\tif (g3d.Ax>0.5*pi) g3d.Ax = 0.5*pi;\n",
        "\t\t\tg3d.x0_mouse = g3d.x_mouse;\n",
        "\t\t\tg3d.y0_mouse = g3d.y_mouse;\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.mouse_down = function(e) {\n",
        "\t\tif (g3d.mouseDownFlag==0) {\n",
        "\t\t\tg3d.x0_mouse = e.clientX;\n",
        "\t\t\tg3d.y0_mouse = e.clientY;\n",
        "\t\t\tg3d.x_mouse = g3d.x0_mouse;\n",
        "\t\t\tg3d.y_mouse = g3d.y0_mouse;\n",
        "\t\t\tg3d.mouseDownFlag = 1;\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.mouse_up = function(e) {\n",
        "\t\tif (g3d.mouseDownFlag==1) {\n",
        "\t\t\tg3d.mouseDownFlag = 0;\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.mouseWheel = function(e) {\n",
        "\t\tg3d.deltaY = e.deltaY;\n",
        "\t\tif ( g3d.deltaY > 0 ) g3d.zoom *= 0.95;\n",
        "\t\telse if ( g3d.deltaY < 0 ) g3d.zoom *= 1.05;\n",
        "\t\tif ( g3d.zoom<0.5 ) g3d.zoom = 0.5;\n",
        "\t\tif ( g3d.zoom>2.0 ) g3d.zoom = 2.0;\n",
        "\t};\n",
        "\n",
        "\t//--- 3D graphics aid (particles)\n",
        "\n",
        "\t// g3d.init( nParticles, xMax, yMax, zMax, xCanvasSize, yCanvasSize, xBoxSize, yShift )\n",
        "\tg3d.init = function( nParticles, xMax, yMax, zMax, xCanvasSize, yCanvasSize, xBoxSize, yShift ) {\n",
        "\t\tg_nParticles = nParticles;\n",
        "\t\tg_xMax = xMax;\n",
        "\t\tg_yMax = yMax;\n",
        "\t\tg_zMax = zMax;\n",
        "\t\tg_xCanvasSize = xCanvasSize; g_yCanvasSize = yCanvasSize;\n",
        "\t\tg_xBoxSize = (xBoxSize==undefined) ? 300 : xBoxSize;\n",
        "\t\tg_yShift = (yShift==undefined) ? 20 : yShift;\n",
        "\t\tg3d.cx0 = 0.5*g_xMax;\t\t// x-rotate center (3D graphics)\n",
        "\t\tg3d.cy0 = 0.5*g_yMax;\t\t// y-rotate center (3D graphics)\n",
        "\t\tg3d.cz0 = 0.5*g_zMax;\t\t// z-rotate center (3D graphics)\n",
        "\t};\n",
        "\n",
        "\t// g3d.setRotateAngle( AxInDegree, AyInDegree );\n",
        "\tg3d.setRotateAngle = function( AxInDegree, AyInDegree ) {\n",
        "\t\tg3d.Ax = AxInDegree*Math.PI/180.0;\n",
        "\t\tg3d.Ay = AyInDegree*Math.PI/180.0;\n",
        "\t};\n",
        "\n",
        "\t// g3d.scxpypFunc();\n",
        "\tg3d.scxpypFunc = function() {\n",
        "\t\tconst xBoxSize = g_xBoxSize;\n",
        "\t\tconst xCenter = xCanvasSize/2, yCenter = yCanvasSize/2-g_yShift, yBoxSize = (xBoxSize/g_xMax)*g_yMax;\n",
        "\t\tconst xp = xCenter - (xBoxSize/2)*g3d.zoom, yp = yCenter - (yBoxSize/2)*g3d.zoom; // g3d param\n",
        "\t\tconst sc = (xBoxSize/g_xMax)*g3d.zoom;\n",
        "\t\treturn [ sc, xp, yp ];\n",
        "\t}\n",
        "\n",
        "\tg3d.set3DRotatedObjects = function(rotateRateOfAyInDegree) {\n",
        "\t\tg3d.ddAy = rotateRateOfAyInDegree*Math.PI/180.0;\n",
        "\t\tg3d.Ay= g3d.Ay + g3d.ddAy; // auto-rotate : if (ddAy==0.0), stop\n",
        "\t\tif (g3d.Ay>Math.PI) g3d.Ay = g3d.Ay - 2.0*Math.PI;\n",
        "\t\tif (g3d.Ay<-Math.PI) g3d.Ay = g3d.Ay + 2.0*Math.PI;\n",
        "\t\tg3d.setBox();           // set box apex\n",
        "\t\tg3d.setRotateXY(g3d.Ax,g3d.Ay); // set rotate angle and rotate center(=box center)\n",
        "\t\tg3d.rotateXY();         // g_xx(i),g_yy(i),g_zz(i) rotate--> ppx(i),ppy(i),ppz(i)\n",
        "\t\tg3d.sortz();            // sort ppz(i) : ppz(srtzix(1)),ppz(srtzix(2)),...,ppz(srtzix(g_nParticles))\n",
        "\t\tg3d.markFarEdge();      // boxEdge[iEdge][2]=1:far side edge or 0:near side edge\n",
        "\t};\n",
        "\n",
        "\tg3d.setBox = function() {\n",
        "\t\tfor (let i=0; i<8; i++) {\n",
        "\t\t\tg3d.xApex[i] = g3d.boxApex[i][0]*g_xMax;\n",
        "\t\t\tg3d.yApex[i] = g3d.boxApex[i][1]*g_yMax;\n",
        "\t\t\tg3d.zApex[i] = g3d.boxApex[i][2]*g_zMax;\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.setRotateXY = function(angleX,angleY) {\n",
        "\t\tg3d.cosAx = Math.cos(angleX);\n",
        "\t\tg3d.sinAx = Math.sin(angleX);\n",
        "\t\tg3d.cosAy = Math.cos(angleY);\n",
        "\t\tg3d.sinAy = Math.sin(angleY);\n",
        "\t\tg3d.cx0 = 0.5*g_xMax;\n",
        "\t\tg3d.cy0 = 0.5*g_yMax;\n",
        "\t\tg3d.cz0 = 0.5*g_zMax;\n",
        "\t};\n",
        "\n",
        "\tg3d.rotateXY = function() { //particles and box apex\n",
        "\t\tconst nn = g_nParticles;\n",
        "\t\tconst cosAx=g3d.cosAx,sinAx=g3d.sinAx,cosAy=g3d.cosAy,sinAy=g3d.sinAy,cx0=g3d.cx0,cy0=g3d.cy0,cz0=g3d.cz0;\n",
        "\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tlet xi, yi, zi;\n",
        "\t\t\t[ xi, yi, zi ] = theModule.getPosition(i);\n",
        "\t\t\tconst y = g_yMax-yi-cy0;\n",
        "\t\t\tg3d.ppx[i] = cosAy*(xi-cx0)+sinAy*(sinAx*y+cosAx*(zi-cz0)) + cx0;\n",
        "\t\t\tg3d.ppy[i] = cosAx*y-sinAx*(zi-cz0) + cy0;\n",
        "\t\t\tg3d.ppz[i] =-sinAy*(xi-cx0)+cosAy*(sinAx*y+cosAx*(zi-cz0)) + cz0;\n",
        "\t\t}\n",
        "\t\tfor (let i=0; i<8; i++) {\n",
        "\t\t\tg3d.pxApex[i] = cosAy*(g3d.xApex[i]-cx0)+sinAy*(sinAx*(g3d.yApex[i]-cy0)+cosAx*(g3d.zApex[i]-cz0))+cx0;\n",
        "\t\t\tg3d.pyApex[i] = cosAx*(g3d.yApex[i]-cy0)-sinAx*(g3d.zApex[i]-cz0) + cy0;\n",
        "\t\t\tg3d.pzApex[i] =-sinAy*(g3d.xApex[i]-cx0)+cosAy*(sinAx*(g3d.yApex[i]-cy0)+cosAx*(g3d.zApex[i]-cz0))+cz0;\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.rotateXYPos = function(xi,yi,zi) {\n",
        "\t\tconst cosAx=g3d.cosAx,sinAx=g3d.sinAx,cosAy=g3d.cosAy,sinAy=g3d.sinAy,cx0=g3d.cx0,cy0=g3d.cy0,cz0=g3d.cz0;\n",
        "\t\tconst y = g_yMax-yi-cy0;\n",
        "\t\tconst rotx = cosAy*(xi-cx0)+sinAy*(sinAx*y+cosAx*(zi-cz0)) + cx0;\n",
        "\t\tconst roty = cosAx*y-sinAx*(zi-cz0) + cy0;\n",
        "\t\t//const rotz =-sinAy*(xi-cx0)+cosAy*(sinAx*y+cosAx*(zi-cz0)) + cz0;\n",
        "\t\treturn [ rotx, roty ];\n",
        "\t};\n",
        "\n",
        "\tg3d.sortz = function() {\n",
        "\t\tconst nn=g_nParticles;\n",
        "\t\tfor (let i=0; i<nn; i++) {\n",
        "\t\t\tg3d.srtzix[i] = i;\n",
        "\t\t}\n",
        "\t\tg3d.qSort(0,nn-1);\n",
        "\t};\n",
        "\n",
        "\tg3d.qSort = function(le,ri) {\n",
        "\t\tlet i,j, pv,w;\n",
        "\t\tif (ri>le) {\n",
        "\t\t\ti = le-1;\n",
        "\t\t\tj = ri;\n",
        "\t\t\tpv = g3d.ppz[g3d.srtzix[ri]];\n",
        "\t\t\twhile (1) {\n",
        "\t\t\t\tdo {\n",
        "\t\t\t\t\ti=i+1;\n",
        "\t\t\t\t} while (pv>g3d.ppz[g3d.srtzix[i]]);\n",
        "\t\t\t\tdo {\n",
        "\t\t\t\t\tj=j-1;\n",
        "\t\t\t\t} while (j>i && g3d.ppz[g3d.srtzix[j]]>pv);\n",
        "\t\t\t\tif (j<=i) break;\n",
        "\t\t\t\tw=g3d.srtzix[i]; g3d.srtzix[i]=g3d.srtzix[j]; g3d.srtzix[j]=w;\n",
        "\t\t\t}\n",
        "\t\t\tw=g3d.srtzix[i]; g3d.srtzix[i]=g3d.srtzix[ri]; g3d.srtzix[ri]=w;\n",
        "\t\t\tg3d.qSort(le,i-1);\n",
        "\t\t\tg3d.qSort(i+1,ri);\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.markFarEdge = function() {\n",
        "\t\t//seek far apex --> iMin\n",
        "\t\tlet zMin = g3d.pzApex[0];\n",
        "\t\tlet iMin = 0;\n",
        "\t\tfor (let i=1; i<8; i++) {\n",
        "\t\t\tif (zMin>g3d.pzApex[i]) {\n",
        "\t\t\t\tzMin = g3d.pzApex[i];\n",
        "\t\t\t\tiMin = i;\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t\t//mark far edge\n",
        "\t\tfor (let iEdge=0; iEdge<12; iEdge++) {\n",
        "\t\t\tg3d.boxEdge[iEdge][2] = 0;\n",
        "\t\t\tif (g3d.boxEdge[iEdge][0]==iMin || g3d.boxEdge[iEdge][1]==iMin) g3d.boxEdge[iEdge][2] = 1;\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.plotNearEdge = function(ctx, sc,xp,yp,color) {\n",
        "\t\tfor (let iEdge=0; iEdge<12; iEdge++) {\n",
        "\t\t\tif (g3d.boxEdge[iEdge][2]==0) { //far edge mark == 1\n",
        "\t\t\t\tg3d.plotEdge(ctx, iEdge,sc,xp,yp,color);\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.plotFarEdge = function(ctx, sc,xp,yp,color) {\n",
        "\t\tfor (let iEdge=0; iEdge<12; iEdge++) {\n",
        "\t\t\tif (g3d.boxEdge[iEdge][2]==1) { //far edge mark == 1\n",
        "\t\t\t\tg3d.plotEdge(ctx, iEdge,sc,xp,yp,color);\n",
        "\t\t\t}\n",
        "\t\t}\n",
        "\t};\n",
        "\n",
        "\tg3d.plotEdge = function(ctx, iEdge,sc,xp,yp,color) {\n",
        "\t\tlet iApex = g3d.boxEdge[iEdge][0];\n",
        "\t\tconst x1 = g3d.pxApex[iApex]*sc+xp;\n",
        "\t\tconst y1 = g3d.pyApex[iApex]*sc+yp;\n",
        "\t\tiApex = g3d.boxEdge[iEdge][1];\n",
        "\t\tconst x2 = g3d.pxApex[iApex]*sc+xp;\n",
        "\t\tconst y2 = g3d.pyApex[iApex]*sc+yp;\n",
        "\t\tg3d.drawLine(ctx, x1, y1, x2, y2, color);\n",
        "\t};\n",
        "\n",
        "\tg3d.drawLine = function(ctx, x1, y1, x2, y2, color) {\n",
        "\t\tctx.strokeStyle = color;\n",
        "\t\tctx.beginPath();\n",
        "\t\tctx.moveTo(x1, y1);\n",
        "\t\tctx.lineTo(x2, y2);\n",
        "\t\tctx.stroke();\n",
        "\t};\n",
        "\n",
        "\tg3d.drawDisc = function( ctx, x, y, r, color ) {\n",
        "\t\tctx.fillStyle = color;\n",
        "\t\tctx.beginPath();\n",
        "\t\tctx.arc(x, y, r, 0, 2*Math.PI, false);\n",
        "\t\tctx.fill();\n",
        "\t};\n",
        "\n",
        "\tg3d.strokeCircle = function( ctx, x, y, r, color ) {\n",
        "\t\tctx.strokeStyle = color;\n",
        "\t\tctx.beginPath();\n",
        "\t\tctx.arc(x, y, r, 0, 2*Math.PI, false);\n",
        "\t\tctx.stroke();\n",
        "\t};\n",
        "\n",
        "\t// --------------------  3D graphics (particles) module end  --------------------\n",
        "\n",
        "\n",
        "\t// --------------------  dom control\n",
        "\n",
        "\tfunction initDom() {\n",
        "\t\tdocument.getElementById(\"step_button\").style.visibility = \"hidden\";\n",
        "\t}\n",
        "\n",
        "\tfunction reset() { resetFlag = true; }\n",
        "\n",
        "\tfunction pause() {\n",
        "\t\tlet btn = document.getElementById(\"pause_button\");\n",
        "\n",
        "\t\tpauseFlag = ( pauseFlag==false );\n",
        "\t\tif ( pauseFlag==false ) btn.innerHTML = \"pause\"; else btn.innerHTML = \"go\";\n",
        "\n",
        "\t\tif ( pauseFlag==true ) {\n",
        "\t\t\tdocument.getElementById(\"step_button\").style.visibility = \"visible\";\n",
        "\t\t} else {\n",
        "\t\t\tdocument.getElementById(\"step_button\").style.visibility = \"hidden\";\n",
        "\t\t}\n",
        "\t}\n",
        "\n",
        "\tfunction step() { stepFlag = true; }\n",
        "\n",
        "\tfunction setTheme() {\n",
        "\t\tv_theme = 0 + document.getElementById(\"slct_theme\").selectedIndex;\n",
        "\t\tresetFlag = true;\n",
        "\t}\n",
        "\n",
        "\tfunction setnParticles() {\n",
        "\t\tconst n = 1 + document.getElementById(\"slct_nn\").selectedIndex;\n",
        "\t\tv_nn = n*100;\n",
        "\t\tresetFlag = true;\n",
        "\t}\n",
        "\n",
        "\tfunction setTempMode() {\n",
        "\t\tv_tempMode = 0 + document.getElementById(\"slct_tempMode\").selectedIndex;\n",
        "\t}\n",
        "\n",
        "\tfunction setContTemp() {  // range mixing\n",
        "\t\tv_contTemp = Number(document.getElementById(\"range_temp\").value);\n",
        "\t\tdocument.getElementById(\"text_temp\").innerHTML = \" \" + v_contTemp.toFixed(0);\n",
        "\t}\n",
        "\n",
        "\tfunction setDispMode() {\n",
        "\t\tdispMode = 0 + document.getElementById(\"slct_dispMode\").selectedIndex;\n",
        "\t}\n",
        "\n",
        "\tfunction setNcalc() {\n",
        "\t\tnCalc = 1 + document.getElementById(\"slct_nCalc\").selectedIndex;\n",
        "\t}\n",
        "\n",
        "\tfunction viewHome() {\n",
        "\t\tg3d.setRotateAngle(-15,-15);\n",
        "\t\tg3d.zoom = 1.0;\n",
        "\t}\n",
        "\n",
        "  // function controlled by python\n",
        "\n",
        "  function breakLoop() {\n",
        "    breakFlag = true;\n",
        "  }\n",
        "\n",
        "  function pysetTheme( theme ) {\n",
        "    v_theme = theme\n",
        "    document.getElementById(\"slct_theme\").selectedIndex = theme;\n",
        "    resetFlag = true;\n",
        "  }\n",
        "\n",
        "  function pysetTempMode( mode ) {\n",
        "    v_tempMode = mode;\n",
        "    document.getElementById(\"slct_tempMode\").selectedIndex = mode;\n",
        "  }\n",
        "\n",
        "  function pysetTemperature(temp) {\n",
        "    theModule.setTemp(temp);\n",
        "  }\n",
        "\n",
        "  function pysetDispMode( mode ) {\n",
        "    dispMode = mode;\n",
        "    document.getElementById(\"slct_dispMode\").selectedIndex = mode;\n",
        "  }\n",
        "\n",
        "  function pygetData( pyMsg ) {\n",
        "    document.getElementById(\"text_from_python\").innerHTML = pyMsg;\n",
        "    return [ sysTime, sysTemp, v_theme ];\n",
        "  }\n",
        "\n",
        "  function pygetParticlesList() {\n",
        "    perticleFlag = false;\n",
        "    return [ nowData, xxList, yyList, zzList, vxList, vyList, vzList ];\n",
        "  }\n",
        "\n",
        "\n",
        "\t// --------------------  public  --------------------\n",
        "\n",
        "\treturn {\n",
        "\t\tmain:\t\t\tmain,\t\t\t// main()\n",
        "\n",
        "\t\t// dom control\n",
        "\t\treset:\t\t\treset,\t\t\t// reset()\n",
        "\t\tpause:\t\t\tpause,\t\t\t// pause()\n",
        "\t\tstep:\t\t\tstep,\t\t\t// step()\n",
        "\n",
        "\t\tsetTheme:\t\tsetTheme,\t\t// setTheme()\n",
        "\t\tsetnParticles:\tsetnParticles,\t// setnParticles()\n",
        "\t\tsetTempMode:\tsetTempMode,\t// setTempMode()\n",
        "\t\tsetContTemp:\tsetContTemp,\t// setContTemp()\n",
        "\t\tsetDispMode:\tsetDispMode,\t// setDispMode()\n",
        "\t\tsetNcalc:\t\tsetNcalc,\t\t// setNcalc()\n",
        "\t\tviewHome:\t\tviewHome,\t\t// viewHome()\n",
        "\n",
        "    breakLoop: breakLoop, // breakLoop();\n",
        "    pysetTheme: pysetTheme, // pysetTheme( theme )\n",
        "    pysetTempMode: pysetTempMode, // pysetTempMode( mode )\n",
        "    pysetTemperature: pysetTemperature, // pysetTemperature( temp )\n",
        "    pysetDispMode: pysetDispMode, // pysetDispMode( mode )\n",
        "    pygetData: pygetData, // pygetData( pyMsg ) : return [ sysTime, sysTemp, atomKind ]\n",
        "\t\tpygetParticlesList: pygetParticlesList, //() :return [ nowData, xxList, yyList, zzList, vxList, vyList, vzList ]\n",
        "\t};\n",
        "\n",
        "\n",
        "})(); // ====================  js042 module end  ====================\n",
        "\n",
        "\n",
        "const js = js042;\n",
        "//window.addEventListener('load', js.main );\n",
        "js.main();\n",
        "\n",
        "\n",
        "// %%%%%%%%%%%%%%%%%%%%  end of javaScript  %%%%%%%%%%%%%%%%%%%%\n",
        "\n",
        "</script>\n",
        "<style type=\"text/css\">\n",
        "body { text-align:left; color:#000000; background-color:#fff8dd; }\n",
        "</style>\n",
        "</head>\n",
        "\n",
        "<body>\n",
        "<p>[js042] BCC crystal (Finnis-Sinclair potential) molecular dynamics 3D</p>\n",
        "<canvas ID=\"canvas_box\" style=\"background-color: #000000;\" WIDTH=\"480\" HEIGHT=\"480\"></canvas><br>\n",
        "\n",
        "<label>material:</label>\n",
        "<select id=\"slct_theme\" onChange=\"js.setTheme()\">\n",
        "<option>W</option><option>Mo</option><option selected>Fe</option><option>Cr</option>\n",
        "<option>Ta</option><option>Nb</option><option>V</option>\n",
        "</select>\n",
        "    <span style=\"margin-right: 180px;\"></span>\n",
        "<button onClick=\"js.reset()\">reset</button>\n",
        "    <span style=\"margin-right: 20px;\"></span>\n",
        "<button id=\"pause_button\" onClick=\"js.pause()\">pause</button>\n",
        "    <span style=\"margin-right: 10px;\"></span>\n",
        "<button id=\"step_button\" onClick=\"js.step()\">step</button>\n",
        "<br>\n",
        "\n",
        "<label>temp mode:</label>\n",
        "<select id=\"slct_tempMode\" onChange=\"js.setTempMode()\">\n",
        "<option>adiabatic</option><option selected>Temp.control</option>\n",
        "</select>\n",
        "<br>\n",
        "\n",
        "<label>cont. Temp</label><label id=\"text_temp\"> 200</label>\n",
        "<input type=\"range\" id=\"range_temp\" min=\"10\" max=\"2500\" value=\"300\" step=\"10\"\n",
        "style=\"width:360px\" oninput=\"js.setContTemp()\">\n",
        "<br>\n",
        "\n",
        "<label> disp. mode:</label>\n",
        "<select id=\"slct_dispMode\" onChange=\"js.setDispMode()\">\n",
        "<option selected>ball</option><option>small ball</option>\n",
        "<option>small ball + bond</option><option>bond only</option>\n",
        "</select>\n",
        "    <span style=\"margin-right: 100px;\"></span>\n",
        "<button onClick=\"js.viewHome()\">return to initial view</button>\n",
        "<br>\n",
        "\n",
        "<p id=\"text_caption\" ></p>\n",
        "<hr width=\"480\" align=\"left\" color=\"#a0a0a0\">\n",
        "<button onClick=\"js.breakLoop()\">animation break to END</button>\n",
        "    <span style=\"margin-right: 50px;\"></span> python msg:\n",
        "<span id=\"text_from_python\" ></span>\n",
        "<br>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\n",
        "\n",
        "  ''')\n",
        "  display(htm)\n",
        "# end def\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# exec html-js code\n",
        "exec_html_js()\n",
        "print(\"--- push [animation break to END] button to end ---\")"
      ],
      "metadata": {
        "id": "qDrjl9Gg_zvn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# get data and print\n",
        "\n",
        "import time\n",
        "\n",
        "# simulator run\n",
        "exec_html_js()\n",
        "print(\"-- start --\")\n",
        "\n",
        "# get data and print\n",
        "for i in range(10):\n",
        "  [ sysTime, sysTemp, atomKind ] = eval_js( 'js.pygetData({})'.format(i) )\n",
        "  print(f'i = {i:>2d},  time = {sysTime*1e12:>6.2f} (ps),  temp = {sysTemp:>7.1f} (K)')\n",
        "  time.sleep(2)\n",
        "\n",
        "# simulator stop\n",
        "eval_js( 'js.breakLoop()' )\n",
        "print(\"-- stop --\")"
      ],
      "metadata": {
        "id": "80t6aPokHXyN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# change theme and dispMode\n",
        "\n",
        "import time\n",
        "\n",
        "themeList = [ '0:W', '1:Mo', '2:Fe', '3:Cr', '4:Ta', '5:Nb', '6:V' ]\n",
        "dispModeList = [ '0;ball', '1:small ball', '2:small ball + bond', '3:bond only' ]\n",
        "\n",
        "# simulator run\n",
        "exec_html_js()\n",
        "print(\"-- start --\")\n",
        "\n",
        "# get data and print\n",
        "for theme in[ 0, 1, 2, 3, 4 ]:\n",
        "  eval_js( 'js.pysetTheme({})'.format(theme) )\n",
        "  print(\"-- theme:\", themeList[theme], \" --\")\n",
        "  for dispMode in [ 0, 1, 2, 3 ]:\n",
        "    eval_js( 'js.pysetDispMode({})'.format(dispMode) )\n",
        "    print(\"   -- dispMode:\", dispModeList[dispMode], \" --\")\n",
        "    [ sysTime, sysTemp, atomKind ] = eval_js( 'js.pygetData({})'.format(theme*10+dispMode) )\n",
        "    print(f'\\t time = {sysTime*1e12:>6.2f} (ps),  temp = {sysTemp:>7.1f} (K)')\n",
        "    time.sleep(3)\n",
        "\n",
        "# simulator stop\n",
        "eval_js( 'js.breakLoop()' )\n",
        "print(\"-- stop --\")"
      ],
      "metadata": {
        "id": "HtSwC1l1GCDg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# get particles data and save\n",
        "\n",
        "import time\n",
        "import numpy as np\n",
        "\n",
        "themeList = [ '0:W', '1:Mo', '2:Fe', '3:Cr', '4:Ta', '5:Nb', '6:V' ]\n",
        "atomList = themeList\n",
        "\n",
        "# exec html-js code\n",
        "exec_html_js()\n",
        "print(\"-- start --\")\n",
        "\n",
        "# set theme\n",
        "theme = 2 # '2:Fe'\n",
        "eval_js( 'js.pysetTheme({})'.format(theme) )\n",
        "print( \"-- theme:\", themeList[theme], \"--\" )\n",
        "\n",
        "# wait 10 sec\n",
        "print(\"-- wait 10 sec. --\")\n",
        "time.sleep(10)\n",
        "\n",
        "# get particle data and plot\n",
        "print(\"-- get particles data --\")\n",
        "[ nowData, xxList, yyList, zzList, vxList, vyList, vzList ] = eval_js('js.pygetParticlesList()')\n",
        "[ sysTime, sysTemp, atomKind ] = nowData\n",
        "print(f\"\\t time = {sysTime*1e12:>6.2f} (ps),  temp = {sysTemp:>7.1f} (K), atom kind = {atomList[atomKind]}\")\n",
        "\n",
        "# simulator stop\n",
        "eval_js( 'js.breakLoop()' )\n",
        "print(\"-- simulator stop --\")\n",
        "\n",
        "# pack particle data\n",
        "packed_data = np.array([ xxList, yyList, zzList, vxList, vyList, vzList ])\n",
        "print(\"shape of  packed_data :\", packed_data.shape )\n",
        "\n",
        "# save packed_data\n",
        "print(\"-- save as 'js042_data.npy'\" )\n",
        "np.save('js042_data.npy', packed_data)"
      ],
      "metadata": {
        "id": "AQNWXCvabZuE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# load data and set numpy array\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "# atom kind data\n",
        "atomList = [ \"0:W \", \"1:Mo\", \"2:Fe\", \"3:Cr\",\" 4:Ta\", \"5:Nb\", \"6:V \" ]\n",
        "sizeList = np.array([ 3.16, 3.15, 2.87, 2.88, 3.30, 3.30, 3.03 ]) * 0.866 # effective diameter( x 1.0e10 )\n",
        "colorList = np.array([\n",
        "    [ 0x66, 0x66, 0xff ], [ 0x00, 0xbb, 0xff ], [ 0x22, 0xdd, 0xdd ], [ 0x44, 0xff, 0xcc ],\n",
        "    [ 0x44, 0xff, 0x88 ], [ 0x22, 0xff, 0x44 ], [ 0x99, 0xff, 0x44 ] ]) / 255\n",
        "\n",
        "xBoxSize, yBoxSize, zBoxSize = 3.2, 3.2, 3.2\n",
        "\n",
        "# load data\n",
        "loaded_data = np.load('js042_data.npy')\n",
        "\n",
        "# set numpy array\n",
        "scale_factor = 1.0e9\n",
        "X = loaded_data[0] * scale_factor\n",
        "Y = loaded_data[1] * scale_factor\n",
        "Z = loaded_data[2] * scale_factor\n",
        "U = loaded_data[3]\n",
        "V = loaded_data[4]\n",
        "W = loaded_data[5]\n",
        "print(f'shape of  X:{X.shape}, Y:{Y.shape}, Z:{Z.shape},  U:{U.shape},  V:{V.shape},  W:{W.shape}')\n",
        "Vabs = np.sqrt(U**2 + V**2 + W**2)"
      ],
      "metadata": {
        "id": "tVP90EbpclKr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plot atoms - scatter plot\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# plot 3D v-space\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(projection='3d')\n",
        "ax.scatter(X,Y,Z)\n",
        "ax.set_xlabel('x')\n",
        "ax.set_ylabel('y')\n",
        "ax.set_zlabel('z')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "0rMM6kVvMdC1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# plot atoms - scatter3d plotly\n",
        "\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "fig = go.Figure()\n",
        "fig.add_trace(go.Scatter3d(\n",
        "    x=X, y=Y, z=Z,\n",
        "    mode='markers', marker=dict( size=5, color=Vabs, colorscale='Jet' ),\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='atom position, color:Vabs',\n",
        "    width=600, height=600,\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "ZlOOx7WShUbt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# velocity space - scatter3d plotly\n",
        "\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "fig = go.Figure()\n",
        "fig.add_trace(go.Scatter3d(\n",
        "    x=U, y=V, z=W,\n",
        "    mode='markers',  marker=dict( size=3, color=Vabs, colorscale='Jet' ),\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    title='velocity space (Vx, Vy, Vz)',\n",
        "    width=600, height=600,\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "4W-f4D_Jjamr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# verocity distribution\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# histogram of Vd\n",
        "print(\"histogram of |v| \")\n",
        "\n",
        "fig = plt.figure()\n",
        "plt.hist(Vabs, 30)\n",
        "plt.xlabel(\"(m/s)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "tdhjBWOwlkm0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: corr, scatter matrix of X,Y,Z, U,V,W with pandas\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# create a dataframe\n",
        "df = pd.DataFrame({'X': X, 'Y': Y, 'Z': Z, 'U': U, 'V': V, 'W': W})\n",
        "\n",
        "# calculate correlation matrix\n",
        "corr = df.corr()\n",
        "\n",
        "# display correlation matrix\n",
        "print(\"Correlation matrix:\")\n",
        "print(corr)\n",
        "\n",
        "# create scatter matrix\n",
        "pd.plotting.scatter_matrix(df)\n",
        "\n",
        "# display scatter matrix\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "YomfQAP2ekCV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# colab AI wrote:\n",
        "# prompt: in radial distribution, exclude distance= 0, means distance of self-atom\n",
        "\n",
        "def radial_distribution(x, y, z, r_max=10, bins=50):\n",
        "  \"\"\"\n",
        "  Calculates the radial distribution function of a set of particles.\n",
        "\n",
        "  Args:\n",
        "      x: The x-coordinates of the particles.\n",
        "      y: The y-coordinates of the particles.\n",
        "      z: The z-coordinates of the particles.\n",
        "      r_max: The maximum distance to consider (in nm).\n",
        "      bins: The number of bins to use.\n",
        "\n",
        "  Returns:\n",
        "      A tuple containing the radial distribution function and the bin centers.\n",
        "  \"\"\"\n",
        "\n",
        "  # Calculate the distances between all pairs of particles\n",
        "  distances = np.sqrt(np.square(np.subtract.outer(x, x)) +\n",
        "                       np.square(np.subtract.outer(y, y)) +\n",
        "                       np.square(np.subtract.outer(z, z)))\n",
        "\n",
        "  # Exclude distance= 0, means distance of self-atom\n",
        "  distances = distances[distances != 0]\n",
        "\n",
        "  # Create a histogram of the distances\n",
        "  hist, bin_edges = np.histogram(distances[distances < r_max], bins=bins)\n",
        "\n",
        "  # Normalize the histogram by the volume of each bin\n",
        "  bin_volumes = 4 * np.pi * (bin_edges[1:]**3 - bin_edges[:-1]**3) / 3\n",
        "  rdf = hist / bin_volumes\n",
        "\n",
        "  # Calculate the bin centers\n",
        "  bin_centers = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
        "\n",
        "  return rdf, bin_centers\n",
        "\n",
        "# plot the radial distribution function\n",
        "rdf, bin_centers = radial_distribution(X, Y, Z, 5, 200)  # add manually - r_max=5, bins=200\n",
        "\n",
        "plt.plot(bin_centers, rdf)\n",
        "plt.xlabel(\"Distance (nm)\")\n",
        "plt.ylabel(\"Radial distribution function\")\n",
        "plt.xlim(0,1.0)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "7jrOxoagiGMR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}